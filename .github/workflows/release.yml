###
# This action will
# * Create GitHub Release with `.apk`
# * Upload `.aab` to Google Play
# on `release/vX.Y.Z` branch push
###

name: Create release

on:
  push:
    branches:
      - 'release/v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build-apk:
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: 'beta'

      - name: Copy .env
        run: cp .env assets/.env

      - name: Set KEY_STORE_FILE and create keystore file
        env:
          CONTEXT_TEMP_DIR: ${{ runner.temp }}
        run: |
          KEY_STORE_FILE="$CONTEXT_TEMP_DIR/release.keystore"
          echo ::set-env name=KEY_STORE_FILE::"$KEY_STORE_FILE"
          echo "$KEY_STORE_BASE64" | base64 -d > "$KEY_STORE_FILE"

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk
        env:
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: built-apk
          path: |
            build/app/outputs/
          if-no-files-found: error

  release-github:
    name: Create Release on GitHub
    needs: [build-apk]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get version from branch name
        run: echo ::set-env name=RELEASING_VERSION::${GITHUB_REF#refs/heads/release/}

      - name: Get release notes
        run: |
          release_notes=$(printf %s "$(sed '/^----$/Q' CHANGELOG.md)")
          release_notes="${release_notes//'%'/'%25'}"
          release_notes="${release_notes//$'\n'/'%0A'}"
          release_notes="${release_notes//$'\r'/'%0D'}"
          echo "::set-env name=RELEASE_NOTES::$release_notes"

      - name: Download artifact made by `build-apk`
        id: download
        uses: actions/download-artifact@v2
        with:
          name: built-apk

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASING_VERSION }}
          release_name: Release ${{ env.RELEASING_VERSION }}
          body: ${{ env.RELEASE_NOTES  }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.download.outputs.download-path }}/apk/release/app-release.apk
          asset_name: salmon-stats.${{ env.RELEASING_VERSION }}.release.apk
          asset_content_type: application/vnd.android.package-archive


  create-pull-request:
    name: Create pull request of release branch
    needs: [release-github]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get version from branch name
        run: echo ::set-env name=RELEASING_VERSION::${GITHUB_REF#refs/heads/release/}

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v3
        with:
          title: Release ${{ env.RELEASING_VERSION }}
          body: |
            _This Pull Request is created automatically with [create-pull-request](https://github.com/peter-evans/create-pull-request)._
          labels: |
            release

      - name: Check output
        run: |
          echo "Created Pull Request: #${{ steps.cpr.outputs.pull-request-number }}"


  build-aab:
    name: Build App Bundle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: 'beta'

      - name: Copy .env
        run: cp .env assets/.env

      - name: Set KEY_STORE_FILE and create keystore file
        env:
          CONTEXT_TEMP_DIR: ${{ runner.temp }}
        run: |
          KEY_STORE_FILE="$CONTEXT_TEMP_DIR/release.keystore"
          echo ::set-env name=KEY_STORE_FILE::"$KEY_STORE_FILE"
          echo "$KEY_STORE_BASE64" | base64 -d > "$KEY_STORE_FILE"

      - name: Install dependencies
        run: flutter pub get

      - name: Build App Bundle
        run: flutter build appbundle --target-platform android-arm,android-arm64,android-x64
        env:
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: built-aab
          path: |
            build/app/outputs/
          if-no-files-found: error

  release-google-play:
    name: Upload built App Bundle to Google Play
    needs: [build-aab]
    runs-on: ubuntu-latest
    steps:
      - name: Get tag subject
        run: echo ::set-env name=TAG_SUBJECT::$(git tag -l --format='%(subject)' "$GITHUB_REF")

      - name: Create whatsNewDirectory
        run: |
          mkdir /tmp/whatsnew
          printf '%s' "$TAG_SUBJECT" > /tmp/whatsnew/whatsnew-en-US

      - name: Download artifact made by `build-aab`
        id: download
        uses: actions/download-artifact@v2
        with:
          name: built-aab

      - name: Upload App Bundle to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON_CONTENT }}
          packageName: games.yuki.salmon_stats_android
          releaseFile: ${{ steps.download.outputs.download-path }}/bundle/release/app-release.aab
          track: alpha
          whatsNewDirectory: /tmp/whatsnew
          mappingFile: ${{ steps.download.outputs.download-path }}/mapping/release/mapping.txt
